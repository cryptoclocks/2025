#include "cc_webupdater.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <Update.h>
#include <SD.h>
#include <MD5Builder.h>
#include <time.h>
#include "cc_download.h"


const char* baseRawURL = "https://raw.githubusercontent.com/cryptoclocks/2025/main";  // **‡∏≠‡∏¢‡πà‡∏≤‡∏°‡∏µ / ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢**
const char* sdPath = "/sd/v3.7.0";  // **‡∏≠‡∏¢‡πà‡∏≤‡∏°‡∏µ / ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢**


// ===== üîí ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô =====
bool checkLastError();
bool checkOldSettingsFile();
bool attemptDownloadSettings();
bool downloadFile(const char* url, const char* savePath);

bool checkMD5(const char* path);
bool checkSize(const char* path, size_t minSize);
bool checkAvailableSpace(size_t requiredSpace);
void backupSettingsFile();
void createSettingsOk();
void safeRollback();
void logError(const char* errorCode);
void cleanupLogs();

// ===== üöÄ Implementations =====

void setupWebUpdater() {
  Serial.println("setupWebUpdater");

  if (checkLastError()) {
    Serial.println("‚ö†Ô∏è ‡∏°‡∏µ Error ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ö‡∏π‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤");
  }
  else
  {
    Serial.println("‡πÑ‡∏°‡πà ‡∏°‡∏µ Error ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ö‡∏π‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤");
  }

  if (SD.exists("/settings.ok")) {
    Serial.println("‚úÖ settings.ok ‡∏û‡∏ö ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ");
    return;
  }
  else
  {
    Serial.println("‚úÖ settings.ok ‡πÑ‡∏°‡πà‡∏û‡∏ö");
  }

  if (checkOldSettingsFile()) {
    createSettingsOk();
    return;
  }
  else
  {
    Serial.println("‡πÄ‡∏ß‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô");
  }

  if (!attemptDownloadSettings()) {
    
    logError("ERR_DOWNLOAD_FAIL");
    Serial.println("rollback");
    safeRollback();
  }
}

// ===== üîí ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô =====




bool checkLastError() {
  if (!SD.exists("/last_error.log")) return false;
  File file = SD.open("/last_error.log", FILE_READ);
  if (!file) return false;
  Serial.println("üìú Last Error Detected:");
  while (file.available()) Serial.write(file.read());
  file.close();
  SD.remove("/last_error.log");
  return true;
}

bool checkOldSettingsFile() {
  if (!SD.exists("/System/website/settings.html")) return false;
  if (!checkMD5("/System/website/settings.html")) return false;
  if (!checkSize("/System/website/settings.html", MIN_SETTINGS_SIZE)) return false;
  Serial.println("‚úÖ settings.html ‡πÄ‡∏Å‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç");
  return true;
}

bool attemptDownloadSettings() {
  Serial.println("üöÄ [‡πÄ‡∏£‡∏¥‡πà‡∏°] attemptDownloadSettings");

  if (!checkAvailableSpace(MIN_SETTINGS_SIZE)) {
    Serial.println("‚ùå [ERROR] ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î settings.html");
    logError("ERR_NO_SPACE");
    safeRollback();
    return false;
  }

  Serial.println("‚úÖ [OK] ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");

  backupSettingsFile();

  for (int i = 0; i < MAX_RETRY_DOWNLOAD; i++) {
    Serial.printf("‚û°Ô∏è [‡∏£‡∏≠‡∏ö %d] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î settings.html\n", i + 1);

    if (downloadFile("/System/website/settings.html")) {
      Serial.println("‚úÖ [OK] ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î settings.html ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      bool md5Ok = checkMD5("/System/website/settings.html");
      bool sizeOk = checkSize("/System/website/settings.html", MIN_SETTINGS_SIZE);

      if (!md5Ok) {
        Serial.println("‚ùå [ERROR] MD5 ‡∏Ç‡∏≠‡∏á settings.html ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£");
      }
      if (!sizeOk) {
        Serial.println("‚ùå [ERROR] ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå settings.html ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ");
      }

      if (md5Ok && sizeOk) {
        Serial.println("‚úÖ [OK] settings.html ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (MD5 + Size)");
        createSettingsOk();
        ESP.restart();
      } else {
        Serial.println("‚ö†Ô∏è [FAIL] settings.html ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô MD5 ‡∏´‡∏£‡∏∑‡∏≠ Size ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö");
      }
    } else {
      Serial.println("‚ùå [ERROR] ‡πÇ‡∏´‡∏•‡∏î settings.html ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å URL");
    }

    Serial.printf("‚ö†Ô∏è [RETRY] ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà %d\n", i + 1);
    delay(3000);
  }

  Serial.println("‚ùå [END] attemptDownloadSettings - ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  return false;
}




bool checkMD5(const char* path) {
  File file = SD.open(path, FILE_READ);
  if (!file) {
    Serial.println("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å MD5 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
    return false;
  }
  MD5Builder md5;
  md5.begin();
  while (file.available()) {
    uint8_t buf[512];
    size_t len = file.read(buf, sizeof(buf));
    md5.add(buf, len);
  }
  file.close();
  md5.calculate();

  String calculatedMD5 = md5.toString();  // <<== ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
  Serial.printf("üìÑ ‡πÑ‡∏ü‡∏•‡πå: %s\n", path);
  Serial.printf("üîç MD5 ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á: %s\n", calculatedMD5.c_str());
  Serial.printf("üîç ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö REQUIRED_SETTINGS_MD5: %s\n", REQUIRED_SETTINGS_MD5);

  bool result = (calculatedMD5 == REQUIRED_SETTINGS_MD5);
  Serial.printf("üîé ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: %s\n", result ? "‡∏ú‡πà‡∏≤‡∏ô" : "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô");
  return result;
}


bool checkSize(const char* path, size_t minSize) {
  File file = SD.open(path, FILE_READ);
  if (!file) return false;
  size_t size = file.size();
  file.close();
  if (size < minSize) {
    Serial.printf("‚ùå ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå %d bytes ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ %d bytes\n", size, minSize);
    return false;
  }
  return true;
}

bool checkAvailableSpace(size_t requiredSpace) {
  uint64_t freeSpace = SD.totalBytes() - SD.usedBytes();
  Serial.printf("üóÇÔ∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á: %llu bytes\n", freeSpace);
  return freeSpace > requiredSpace;
}

void backupSettingsFile() {
  if (SD.exists("/System/website/settings.bak")) SD.remove("/System/website/settings.bak");
  if (SD.exists("/System/website/settings.html")) {
    if (SD.rename("/System/website/settings.html", "/System/website/settings.bak")) {
      Serial.println("‚úÖ backup settings.html -> settings.bak ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      Serial.println("‚ùå backup settings.html ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    }
  }
}

void createSettingsOk() {
  File file = SD.open("/settings.ok", FILE_WRITE);
  if (!file) return;
  file.println("{\"firmwareVersion\":\"3.7.0\",\"settingsVersion\":\"3.7.0\",\"updateDate\":\"2025-05-01\",\"settingsMD5\":\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}");
  file.close();
  Serial.println("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á settings.ok ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
}

void safeRollback() {
  Serial.println("üî¥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Rollback Firmware...");
  Update.rollBack();
  ESP.restart();
}

void logError(const char* errorCode) {
  char filename[64];
  time_t now = time(nullptr);
  struct tm* tm_info = localtime(&now);
  snprintf(filename, sizeof(filename), "/log/log_%04d%02d%02d_%02d%02d.txt",
           tm_info->tm_year + 1900, tm_info->tm_mon + 1, tm_info->tm_mday,
           tm_info->tm_hour, tm_info->tm_min);
  File file = SD.open(filename, FILE_WRITE);
  if (!file) return;
  file.printf("[%04d-%02d-%02d %02d:%02d:%02d] ERROR: %s\n",
              tm_info->tm_year + 1900, tm_info->tm_mon + 1, tm_info->tm_mday,
              tm_info->tm_hour, tm_info->tm_min, tm_info->tm_sec,
              errorCode);
  file.close();
  cleanupLogs();
}

void cleanupLogs() {
  File root = SD.open("/log");
  if (!root || !root.isDirectory()) return;
  File file = root.openNextFile();
  int fileCount = 0;
  while (file) {
    fileCount++;
    file = root.openNextFile();
  }
  if (fileCount > MAX_LOG_FILES) {
    File oldest = root.openNextFile();
    if (oldest) {
      Serial.printf("üßπ ‡∏•‡∏ö log ‡πÄ‡∏Å‡πà‡∏≤: %s\n", oldest.name());
      SD.remove(oldest.name());
    }
  }
}